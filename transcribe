#!/Users/student/Desktop/ai+design/Speech-To-Text/.venv/bin/python
#!/usr/bin/env python3
import os
import sys
from dotenv import load_dotenv
import assemblyai as aai
from google_docs_helper import create_doc_with_text
import requests
import time
import argparse
import mimetypes
import subprocess
import json

load_dotenv(os.path.join(os.path.dirname(os.path.abspath(__file__)), ".env"))

ASSEMBLYAI_API_KEY = os.getenv('ASSEMBLYAI_API_KEY')
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET')

def is_valid_audio_file(file_path):
    """Check if the file is a valid audio file."""
    # Skip validation for URLs
    if file_path.startswith(("http://", "https://")):
        return True
        
    # Check if file exists
    if not os.path.isfile(file_path):
        print(f"Error: File '{file_path}' does not exist.")
        return False
        
    # Get the file's MIME type
    mime_type, _ = mimetypes.guess_type(file_path)
    
    # List of supported audio MIME types
    supported_types = [
        'audio/mpeg',           # .mp3
        'audio/mp4',            # .m4a
        'audio/x-m4a',          # .m4a
        'audio/mp4a-latm',      # .m4a
        'audio/wav',            # .wav
        'audio/x-wav',          # .wav
        'audio/ogg',            # .ogg
        'audio/flac',           # .flac
        'audio/aac',            # .aac
        'audio/webm',           # .webm
    ]
    
    if mime_type not in supported_types:
        print(f"Error: Unsupported file type '{mime_type}'. This tool only supports audio files.")
        print("Supported formats: MP3, WAV, M4A, OGG, FLAC, AAC, WEBM")
        return False
        
    return True

def get_audio_length(file_path):
    """Get the length of an audio file in minutes using ffmpeg."""
    try:
        # Use ffmpeg to get audio duration
        cmd = [
            'ffprobe',
            '-v', 'quiet',
            '-print_format', 'json',
            '-show_format',
            file_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode == 0:
            data = json.loads(result.stdout)
            duration_seconds = float(data['format']['duration'])
            return duration_seconds / 60  # Convert to minutes
        return None
    except Exception as e:
        print(f"Warning: Could not determine audio length: {e}")
        return None

def confirm_long_transcription(length_minutes):
    """Ask user to confirm transcription of long audio files."""
    print(f"\nWarning: This audio file is {length_minutes:.1f} minutes long.")
    print("Transcribing long audio files may take significant time and API credits.")
    response = input("Do you want to continue? (y/N): ").lower()
    return response == 'y'

def transcribe_with_slam(audio_file_path, keyterms_prompt=None):
    base_url = "https://api.assemblyai.com"
    headers = {"authorization": ASSEMBLYAI_API_KEY}

    # Support both local files and URLs
    if audio_file_path.startswith("http://") or audio_file_path.startswith("https://"):
        audio_url = audio_file_path
    else:
        # Upload local file to AssemblyAI
        upload_url = f"{base_url}/v2/upload"
        with open(audio_file_path, "rb") as f:
            upload_response = requests.post(upload_url, headers=headers, files={"file": f})
        if upload_response.status_code != 200:
            print(f"Error uploading file: {upload_response.text}")
            sys.exit(1)
        audio_url = upload_response.json()["upload_url"]

    data = {
        "audio_url": audio_url,
        "speech_model": "slam-1",
    }
    if keyterms_prompt:
        data["keyterms_prompt"] = keyterms_prompt

    response = requests.post(base_url + "/v2/transcript", headers=headers, json=data)
    if response.status_code != 200:
        print(f"Error: {response.status_code}, Response: {response.text}")
        response.raise_for_status()

    transcript_response = response.json()
    transcript_id = transcript_response["id"]
    polling_endpoint = f"{base_url}/v2/transcript/{transcript_id}"

    print("[AssemblyAI] Waiting for transcription to complete...")
    while True:
        transcript = requests.get(polling_endpoint, headers=headers).json()
        if transcript["status"] == "completed":
            print("[AssemblyAI] Transcription complete.")
            return transcript["text"]
        elif transcript["status"] == "error":
            raise RuntimeError(f"Transcription failed: {transcript['error']}")
        else:
            time.sleep(3)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Transcribe audio and upload to Google Docs.")
    parser.add_argument("audio_file_path", help="Path or URL to audio file")
    parser.add_argument("--slam", action="store_true", help="Use slam-1 model with keyterms_prompt")
    parser.add_argument("--keyterms", nargs="*", help="Key terms for keyterms_prompt (slam-1 only)")
    args = parser.parse_args()

    audio_file_path = args.audio_file_path
    
    # Validate file type before proceeding
    if not is_valid_audio_file(audio_file_path):
        sys.exit(1)
        
    # Check audio length for local files
    if not audio_file_path.startswith(("http://", "https://")):
        length_minutes = get_audio_length(audio_file_path)
        if length_minutes and length_minutes > 30:
            if not confirm_long_transcription(length_minutes):
                print("Transcription cancelled by user.")
                sys.exit(0)

    if args.slam:
        transcript_text = transcribe_with_slam(audio_file_path, args.keyterms)
    else:
        aai.settings.api_key = ASSEMBLYAI_API_KEY  # Ensure API key is set for SDK
        config = aai.TranscriptionConfig(speaker_labels=True)
        try:
            transcriber = aai.Transcriber()
            transcript = transcriber.transcribe(audio_file_path, config)
            if transcript.status == "error":
                print(f"Transcription failed: {transcript.error}")
                sys.exit(1)
            if hasattr(transcript, 'utterances') and transcript.utterances:
                transcript_text = "\n".join([
                    f"Speaker {utt.speaker}: {utt.text}" for utt in transcript.utterances
                ])
            else:
                transcript_text = transcript.text
            print("[AssemblyAI] Transcription complete.")
        except Exception as e:
            print(f"Error during transcription: {e}")
            sys.exit(1)

    # Google Docs API call
    try:
        doc_title = f"Transcript for {os.path.basename(audio_file_path)}"
        google_doc_link = create_doc_with_text(doc_title, transcript_text)
        if google_doc_link:
            print(f"[Google Docs] Document created: {google_doc_link}")
        else:
            print("[Google Docs] Failed to create document.")
    except Exception as e:
        print(f"Error during Google Docs upload: {e}")
        sys.exit(1)

    print(f"Transcript: {transcript_text}")
    print(f"Google Doc Link: {google_doc_link}") 